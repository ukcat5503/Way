using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CoinParticle : MonoBehaviour {

	[SerializeField]
	GameObject flyTargetObject;
	[SerializeField]
	GameObject particlePrefab;

	[SerializeField]
	public float coin;

	const float coinPerParticle = 0.1f;

	void Start () {
		int particleQty = (int)(coin / coinPerParticle);
		for (int i = 0; i < particleQty; ++i){
			/* 
			var obj = Instantiate(particlePrefab) as GameObject;
			float angle = Random.Range(0f,360f);
			var shotVector = new Vector3(Mathf.Sin(angle * Mathf.Deg2Rad),0f , Mathf.Cos(angle * Mathf.Deg2Rad));
			obj.GetComponent<Rigidbody>().AddForce(shotVector * 0.5f, ForceMode.Impulse);
			*/
			ShootFixedAngle(flyTargetObject.transform.position, 60.0f );
		}
	}

	private void ShootFixedAngle( Vector3 i_targetPosition, float i_angle )
	{
		float speedVec  = ComputeVectorFromAngle( i_targetPosition, i_angle );

		Vector3 vec = ConvertVectorToVector3( speedVec, i_angle, i_targetPosition );
		InstantiateShootObject(vec);
	}

	private float ComputeVectorFromAngle( Vector3 i_targetPosition, float i_angle )
	{
		// xz平面の距離を計算。
		Vector2 startPos    = new Vector2( transform.position.x, transform.position.z );
		Vector2 targetPos   = new Vector2( i_targetPosition.x, i_targetPosition.z );
		float distance      = Vector2.Distance( targetPos, startPos );
		float x     = distance;
		float g     = Physics.gravity.y;
		float y0    = flyTargetObject.transform.position.y;
		float y     = i_targetPosition.y;

		// Mathf.Cos()、Mathf.Tan()に渡す値の単位はラジアンだ。角度のまま渡してはいけないぞ！
		float rad   = i_angle * Mathf.Deg2Rad;

		float cos   = Mathf.Cos( rad );
		float tan   = Mathf.Tan( rad );

		(y - y0 - x * tan).Log();

		float v0Square  = g * x * x / ( 2 * cos * cos * ( y - y0 - x * tan ) );
		
		// 負数を平方根計算すると虚数になってしまう。
		// 虚数はfloatでは表現できない。
		// こういう場合はこれ以上の計算は打ち切ろう。
		if( v0Square <= 0.0f )
		{
			return 0.0f;
		}
		float v0    = Mathf.Sqrt( v0Square );
		return v0;
	}

	private Vector3 ConvertVectorToVector3( float i_v0, float i_angle, Vector3 i_targetPosition )
	{
		Vector3     startPos    = flyTargetObject.transform.position;
		Vector3     targetPos   = i_targetPosition;
		startPos.y  = 0.0f;
		targetPos.y = 0.0f;

		Vector3     dir     = ( targetPos - startPos ).normalized;
		Quaternion yawRot   = Quaternion.FromToRotation( Vector3.right, dir );
		Vector3     vec     = i_v0 * Vector3.right;
		
		vec     = yawRot * Quaternion.AngleAxis( i_angle, Vector3.forward ) * vec;


		return vec;
	}

	private void InstantiateShootObject( Vector3 i_shootVector )
	{
		var obj = Instantiate(particlePrefab) as GameObject;
		var rigidbody = obj.GetComponent<Rigidbody>();

		Vector3 force = i_shootVector * rigidbody.mass;

		rigidbody.AddForce( force, ForceMode.Impulse );
	}
}
